{"includedArchiveIdentifiers":["Playdate"],"interfaceLanguages":{"swift":[{"children":[{"title":"Articles","type":"groupMarker"},{"path":"\/documentation\/playdate\/downloadingthetools","title":"Downloading the Tools","type":"article"},{"path":"\/documentation\/playdate\/buildingtheexamples","title":"Building the Examples","type":"article"},{"path":"\/documentation\/playdate\/exploringtheexamples","title":"Exploring the Examples","type":"article"},{"path":"\/documentation\/playdate\/creatingyourowngame","title":"Creating Your Own Game","type":"article"},{"title":"Essentials","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/playdate\/display\/height","title":"static var height: Int32","type":"property"},{"path":"\/documentation\/playdate\/display\/width","title":"static var width: Int32","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/playdate\/display\/setflipped(x:y:)","title":"static func setFlipped(x: Bool, y: Bool)","type":"method"},{"path":"\/documentation\/playdate\/display\/setinverted(_:)","title":"static func setInverted(Bool)","type":"method"},{"path":"\/documentation\/playdate\/display\/setmosaic(x:y:)","title":"static func setMosaic(x: UInt32, y: UInt32)","type":"method"},{"path":"\/documentation\/playdate\/display\/setoffset(dx:dy:)","title":"static func setOffset(dx: Int32, dy: Int32)","type":"method"},{"path":"\/documentation\/playdate\/display\/setrefreshrate(rate:)","title":"static func setRefreshRate(rate: Float)","type":"method"},{"path":"\/documentation\/playdate\/display\/setscale(s:)","title":"static func setScale(s: UInt32)","type":"method"}],"path":"\/documentation\/playdate\/display","title":"Display","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/playdate\/graphics\/checkmaskcollision(bitmap1:x1:y1:flip1:bitmap2:x2:y2:flip2:rect:)","title":"static func checkMaskCollision(bitmap1: OpaquePointer, x1: Int32, y1: Int32, flip1: LCDBitmapFlip, bitmap2: OpaquePointer, x2: Int32, y2: Int32, flip2: LCDBitmapFlip, rect: LCDRect) -> Int32","type":"method"},{"path":"\/documentation\/playdate\/graphics\/clearbitmap(bitmap:bgcolor:)","title":"static func clearBitmap(bitmap: OpaquePointer, bgcolor: LCDColor)","type":"method"},{"path":"\/documentation\/playdate\/graphics\/clearcliprect()","title":"static func clearClipRect()","type":"method"},{"path":"\/documentation\/playdate\/graphics\/copybitmap(bitmap:)","title":"static func copyBitmap(bitmap: OpaquePointer) -> OpaquePointer?","type":"method"},{"path":"\/documentation\/playdate\/graphics\/drawbitmap(bitmap:x:y:flip:)","title":"static func drawBitmap(bitmap: OpaquePointer, x: Int32, y: Int32, flip: LCDBitmapFlip)","type":"method"},{"path":"\/documentation\/playdate\/graphics\/drawellipse(x:y:width:height:linewidth:startangle:endangle:color:)","title":"static func drawEllipse(x: Int32, y: Int32, width: Int32, height: Int32, lineWidth: Int32, startAngle: Float, endAngle: Float, color: LCDColor)","type":"method"},{"path":"\/documentation\/playdate\/graphics\/drawline(x1:y1:x2:y2:width:color:)","title":"static func drawLine(x1: Int32, y1: Int32, x2: Int32, y2: Int32, width: Int32, color: LCDColor)","type":"method"},{"path":"\/documentation\/playdate\/graphics\/drawrect(x:y:width:height:color:)","title":"static func drawRect(x: Int32, y: Int32, width: Int32, height: Int32, color: LCDColor)","type":"method"},{"path":"\/documentation\/playdate\/graphics\/drawrotatedbitmap(bitmap:x:y:degrees:centerx:centery:xscale:yscale:)","title":"static func drawRotatedBitmap(bitmap: OpaquePointer, x: Int32, y: Int32, degrees: Float, centerx: Float, centery: Float, xscale: Float, yscale: Float)","type":"method"},{"path":"\/documentation\/playdate\/graphics\/drawscaledbitmap(bitmap:x:y:xscale:yscale:)","title":"static func drawScaledBitmap(bitmap: OpaquePointer, x: Int32, y: Int32, xscale: Float, yscale: Float)","type":"method"},{"path":"\/documentation\/playdate\/graphics\/fillellipse(x:y:width:height:startangle:endangle:color:)","title":"static func fillEllipse(x: Int32, y: Int32, width: Int32, height: Int32, startAngle: Float, endAngle: Float, color: LCDColor)","type":"method"},{"path":"\/documentation\/playdate\/graphics\/fillpolygon(npoints:points:color:fillrule:)","title":"static func fillPolygon(nPoints: Int32, points: UnsafeMutablePointer<Int32>?, color: LCDColor, fillRule: LCDPolygonFillRule)","type":"method"},{"path":"\/documentation\/playdate\/graphics\/fillrect(x:y:width:height:color:)","title":"static func fillRect(x: Int32, y: Int32, width: Int32, height: Int32, color: LCDColor)","type":"method"},{"path":"\/documentation\/playdate\/graphics\/filltriangle(x1:y1:x2:y2:x3:y3:color:)","title":"static func fillTriangle(x1: Int32, y1: Int32, x2: Int32, y2: Int32, x3: Int32, y3: Int32, color: LCDColor)","type":"method"},{"path":"\/documentation\/playdate\/graphics\/freebitmap(bitmap:)","title":"static func freeBitmap(bitmap: OpaquePointer)","type":"method"},{"path":"\/documentation\/playdate\/graphics\/getbitmapdata(bitmap:width:height:rowbytes:mask:data:)","title":"static func getBitmapData(bitmap: OpaquePointer, width: UnsafeMutablePointer<Int32>, height: UnsafeMutablePointer<Int32>?, rowbytes: UnsafeMutablePointer<Int32>?, mask: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>?, data: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>?)","type":"method"},{"path":"\/documentation\/playdate\/graphics\/getbitmapmask(bitmap:)","title":"static func getBitmapMask(bitmap: OpaquePointer) -> OpaquePointer?","type":"method"},{"path":"\/documentation\/playdate\/graphics\/getdisplayframe()","title":"static func getDisplayFrame() -> UnsafeMutablePointer<UInt8>?","type":"method"},{"path":"\/documentation\/playdate\/graphics\/getframe()","title":"static func getFrame() -> UnsafeMutablePointer<UInt8>?","type":"method"},{"path":"\/documentation\/playdate\/graphics\/gettexttracking()","title":"static func getTextTracking() -> Int32","type":"method"},{"path":"\/documentation\/playdate\/graphics\/loadbitmap(path:)","title":"static func loadBitmap(path: StaticString) -> OpaquePointer","type":"method"},{"path":"\/documentation\/playdate\/graphics\/loadintobitmap(path:bitmap:)","title":"static func loadIntoBitmap(path: StaticString, bitmap: OpaquePointer)","type":"method"},{"path":"\/documentation\/playdate\/graphics\/markupdatedrows(start:end:)","title":"static func markUpdatedRows(start: Int32, end: Int32)","type":"method"},{"path":"\/documentation\/playdate\/graphics\/newbitmap(width:height:bgcolor:)","title":"static func newBitmap(width: Int32, height: Int32, bgcolor: LCDColor) -> OpaquePointer?","type":"method"},{"path":"\/documentation\/playdate\/graphics\/popcontext()","title":"static func popContext()","type":"method"},{"path":"\/documentation\/playdate\/graphics\/pushcontext(target:)","title":"static func pushContext(target: OpaquePointer?)","type":"method"},{"path":"\/documentation\/playdate\/graphics\/rotatedbitmap(bitmap:rotation:xscale:yscale:)","title":"static func rotatedBitmap(bitmap: OpaquePointer, rotation: Float, xscale: Float, yscale: Float) -> (OpaquePointer?, Int32)","type":"method"},{"path":"\/documentation\/playdate\/graphics\/setbitmapmask(bitmap:mask:)","title":"static func setBitmapMask(bitmap: OpaquePointer, mask: OpaquePointer) -> Int32","type":"method"},{"path":"\/documentation\/playdate\/graphics\/setcliprect(x:y:width:height:)","title":"static func setClipRect(x: Int32, y: Int32, width: Int32, height: Int32)","type":"method"},{"path":"\/documentation\/playdate\/graphics\/setdrawmode(mode:)","title":"static func setDrawMode(mode: LCDBitmapDrawMode)","type":"method"},{"path":"\/documentation\/playdate\/graphics\/setfont(font:)","title":"static func setFont(font: OpaquePointer?)","type":"method"},{"path":"\/documentation\/playdate\/graphics\/setlinecapstyle(endcapstyle:)","title":"static func setLineCapStyle(endCapStyle: LCDLineCapStyle)","type":"method"},{"path":"\/documentation\/playdate\/graphics\/setscreencliprect(x:y:width:height:)","title":"static func setScreenClipRect(x: Int32, y: Int32, width: Int32, height: Int32)","type":"method"},{"path":"\/documentation\/playdate\/graphics\/setstencil(stencil:)","title":"static func setStencil(stencil: OpaquePointer?)","type":"method"},{"path":"\/documentation\/playdate\/graphics\/setstencilimage(stencil:tile:)","title":"static func setStencilImage(stencil: OpaquePointer?, tile: Int32)","type":"method"},{"path":"\/documentation\/playdate\/graphics\/settextleading(leading:)","title":"static func setTextLeading(leading: Int32)","type":"method"},{"path":"\/documentation\/playdate\/graphics\/settexttracking(tracking:)","title":"static func setTextTracking(tracking: Int32)","type":"method"},{"path":"\/documentation\/playdate\/graphics\/tilebitmap(bitmap:x:y:width:height:flip:)","title":"static func tileBitmap(bitmap: OpaquePointer, x: Int32, y: Int32, width: Int32, height: Int32, flip: LCDBitmapFlip)","type":"method"}],"path":"\/documentation\/playdate\/graphics","title":"Graphics","type":"enum"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/playdate\/sprite\/tag-swift.struct\/init(id:)","title":"init(id: UInt8)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/playdate\/sprite\/tag-swift.struct\/id","title":"var id: UInt8","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/playdate\/sprite\/tag-swift.struct\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/playdate\/sprite\/tag-swift.struct\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/playdate\/sprite\/tag-swift.struct\/init(integerliteral:)","title":"init(integerLiteral: UInt8)","type":"init"}],"path":"\/documentation\/playdate\/sprite\/tag-swift.struct\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"}],"path":"\/documentation\/playdate\/sprite\/tag-swift.struct","title":"Sprite.Tag","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/playdate\/sprite\/init()","title":"init()","type":"init"},{"path":"\/documentation\/playdate\/sprite\/init(borrowing:)","title":"init(borrowing: OpaquePointer)","type":"init"},{"path":"\/documentation\/playdate\/sprite\/init(owning:)","title":"init(owning: OpaquePointer)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/playdate\/sprite\/bounds","title":"var bounds: PDRect","type":"property"},{"path":"\/documentation\/playdate\/sprite\/colliderect","title":"var collideRect: PDRect","type":"property"},{"path":"\/documentation\/playdate\/sprite\/collisionsenabled","title":"var collisionsEnabled: Bool","type":"property"},{"path":"\/documentation\/playdate\/sprite\/imageflip","title":"var imageFlip: LCDBitmapFlip","type":"property"},{"path":"\/documentation\/playdate\/sprite\/isvisible","title":"var isVisible: Bool","type":"property"},{"path":"\/documentation\/playdate\/sprite\/position","title":"var position: (x: Float, y: Float)","type":"property"},{"path":"\/documentation\/playdate\/sprite\/tag-swift.property","title":"var tag: Tag","type":"property"},{"path":"\/documentation\/playdate\/sprite\/updatesenabled","title":"var updatesEnabled: Bool","type":"property"},{"path":"\/documentation\/playdate\/sprite\/userdata","title":"var userData: UnsafeMutableRawPointer?","type":"property"},{"path":"\/documentation\/playdate\/sprite\/zindex","title":"var zIndex: Int16","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/playdate\/sprite\/addsprite()","title":"func addSprite()","type":"method"},{"path":"\/documentation\/playdate\/sprite\/alloverlappingsprites(body:)","title":"func allOverlappingSprites<T>(body: (UnsafeBufferPointer<OpaquePointer?>) -> T) -> T","type":"method"},{"path":"\/documentation\/playdate\/sprite\/checkcollisions(goalx:goaly:)","title":"func checkCollisions(goalX: Float, goalY: Float) -> (actualX: Float, actualY: Float)","type":"method"},{"path":"\/documentation\/playdate\/sprite\/checkcollisions(goalx:goaly:body:)","title":"func checkCollisions<T>(goalX: Float, goalY: Float, body: (_ actualX: Float, _ actualY: Float, _ collisions: UnsafeBufferPointer<SpriteCollisionInfo>) -> T) -> T","type":"method"},{"path":"\/documentation\/playdate\/sprite\/clearcliprect()","title":"func clearClipRect()","type":"method"},{"path":"\/documentation\/playdate\/sprite\/clearcliprectsinrange(startz:endz:)","title":"func clearClipRectsInRange(startZ: Int32, endZ: Int32)","type":"method"},{"path":"\/documentation\/playdate\/sprite\/clearcolliderect()","title":"func clearCollideRect()","type":"method"},{"path":"\/documentation\/playdate\/sprite\/clearstencil()","title":"func clearStencil()","type":"method"},{"path":"\/documentation\/playdate\/sprite\/copy()","title":"func copy() -> Sprite","type":"method"},{"path":"\/documentation\/playdate\/sprite\/forget()","title":"func forget()","type":"method"},{"path":"\/documentation\/playdate\/sprite\/markdirty()","title":"func markDirty()","type":"method"},{"path":"\/documentation\/playdate\/sprite\/moveby(dx:dy:)","title":"func moveBy(dx: Float, dy: Float)","type":"method"},{"path":"\/documentation\/playdate\/sprite\/moveto(x:y:)","title":"func moveTo(x: Float, y: Float)","type":"method"},{"path":"\/documentation\/playdate\/sprite\/movewithcollisions(goalx:goaly:)","title":"func moveWithCollisions(goalX: Float, goalY: Float) -> (actualX: Float, actualY: Float)","type":"method"},{"path":"\/documentation\/playdate\/sprite\/movewithcollisions(goalx:goaly:body:)","title":"func moveWithCollisions<T>(goalX: Float, goalY: Float, body: (_ actualX: Float, _ actualY: Float, _ collisions: UnsafeBufferPointer<SpriteCollisionInfo>) -> T) -> T","type":"method"},{"path":"\/documentation\/playdate\/sprite\/queryspriteinfoalongline(x1:y1:x2:y2:body:)","title":"func querySpriteInfoAlongLine<T>(x1: Float, y1: Float, x2: Float, y2: Float, body: (UnsafeBufferPointer<SpriteQueryInfo>) -> T) -> T","type":"method"},{"path":"\/documentation\/playdate\/sprite\/queryspritesalongline(x1:y1:x2:y2:body:)","title":"func querySpritesAlongLine<T>(x1: Float, y1: Float, x2: Float, y2: Float, body: (UnsafeBufferPointer<OpaquePointer?>) -> T) -> T","type":"method"},{"path":"\/documentation\/playdate\/sprite\/queryspritesatpoint(x:y:body:)","title":"func querySpritesAtPoint<T>(x: Float, y: Float, body: (UnsafeBufferPointer<OpaquePointer?>) -> T) -> T","type":"method"},{"path":"\/documentation\/playdate\/sprite\/queryspritesinrect(x:y:width:height:body:)","title":"func querySpritesInRect<T>(x: Float, y: Float, width: Float, height: Float, body: (UnsafeBufferPointer<OpaquePointer?>) -> T) -> T","type":"method"},{"path":"\/documentation\/playdate\/sprite\/removesprite()","title":"func removeSprite()","type":"method"},{"path":"\/documentation\/playdate\/sprite\/setcliprect(cliprect:)","title":"func setClipRect(clipRect: LCDRect)","type":"method"},{"path":"\/documentation\/playdate\/sprite\/setcliprectsinrange(cliprect:startz:endz:)","title":"func setClipRectsInRange(clipRect: LCDRect, startZ: Int32, endZ: Int32)","type":"method"},{"path":"\/documentation\/playdate\/sprite\/setcollisionresponsefunction(func:)","title":"func setCollisionResponseFunction(func: LCDSpriteCollisionFilterProc)","type":"method"},{"path":"\/documentation\/playdate\/sprite\/setdrawfunction(func:)","title":"func setDrawFunction(func: LCDSpriteDrawFunction)","type":"method"},{"path":"\/documentation\/playdate\/sprite\/setdrawmode(mode:)","title":"func setDrawMode(mode: LCDBitmapDrawMode)","type":"method"},{"path":"\/documentation\/playdate\/sprite\/setignoresdrawoffset(flag:)","title":"func setIgnoresDrawOffset(flag: Int32)","type":"method"},{"path":"\/documentation\/playdate\/sprite\/setimage(image:flip:)","title":"func setImage(image: LCDBitmap, flip: LCDBitmapFlip)","type":"method"},{"path":"\/documentation\/playdate\/sprite\/setopaque(_:)","title":"func setOpaque(Bool)","type":"method"},{"path":"\/documentation\/playdate\/sprite\/setsize(width:height:)","title":"func setSize(width: Float, height: Float)","type":"method"},{"path":"\/documentation\/playdate\/sprite\/setstencil(stencil:)","title":"func setStencil(stencil: LCDBitmap)","type":"method"},{"path":"\/documentation\/playdate\/sprite\/setstencilimage(stencil:tile:)","title":"func setStencilImage(stencil: LCDBitmap, tile: Int32)","type":"method"},{"path":"\/documentation\/playdate\/sprite\/setstencilpattern(pattern:)","title":"func setStencilPattern(pattern: UnsafeMutablePointer<UInt8>?)","type":"method"},{"path":"\/documentation\/playdate\/sprite\/setupdatefunction(func:)","title":"func setUpdateFunction(func: LCDSpriteUpdateFunction)","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/playdate\/sprite\/adddirtyrect(dirtyrect:)","title":"static func addDirtyRect(dirtyRect: LCDRect)","type":"method"},{"path":"\/documentation\/playdate\/sprite\/drawsprites()","title":"static func drawSprites()","type":"method"},{"path":"\/documentation\/playdate\/sprite\/getspritecount()","title":"static func getSpriteCount() -> Int32","type":"method"},{"path":"\/documentation\/playdate\/sprite\/removeallsprites()","title":"static func removeAllSprites()","type":"method"},{"path":"\/documentation\/playdate\/sprite\/removesprites(sprites:count:)","title":"static func removeSprites(sprites: UnsafeMutablePointer<OpaquePointer?>?, count: Int32)","type":"method"},{"path":"\/documentation\/playdate\/sprite\/resetcollisionworld()","title":"static func resetCollisionWorld()","type":"method"},{"path":"\/documentation\/playdate\/sprite\/setalwaysredraw(_:)","title":"static func setAlwaysRedraw(Bool)","type":"method"},{"path":"\/documentation\/playdate\/sprite\/updateanddrawsprites()","title":"static func updateAndDrawSprites()","type":"method"}],"path":"\/documentation\/playdate\/sprite","title":"Sprite","type":"struct"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/playdate\/system\/accelerometer","title":"static var accelerometer: (x: Float, y: Float, z: Float)","type":"property"},{"path":"\/documentation\/playdate\/system\/batterypercentage","title":"static var batteryPercentage: Float","type":"property"},{"path":"\/documentation\/playdate\/system\/batteryvoltage","title":"static var batteryVoltage: Float","type":"property"},{"path":"\/documentation\/playdate\/system\/buttonstate","title":"static var buttonState: (current: PDButtons, pushed: PDButtons, released: PDButtons)","type":"property"},{"path":"\/documentation\/playdate\/system\/crankangle","title":"static var crankAngle: Float","type":"property"},{"path":"\/documentation\/playdate\/system\/crankchange","title":"static var crankChange: Float","type":"property"},{"path":"\/documentation\/playdate\/system\/currenttimemilliseconds","title":"static var currentTimeMilliseconds: UInt32","type":"property"},{"path":"\/documentation\/playdate\/system\/elapsedtime","title":"static var elapsedTime: Float","type":"property"},{"path":"\/documentation\/playdate\/system\/iscrankdocked","title":"static var isCrankDocked: Bool","type":"property"},{"path":"\/documentation\/playdate\/system\/isflipped","title":"static var isFlipped: Bool","type":"property"},{"path":"\/documentation\/playdate\/system\/reduceflashing","title":"static var reduceFlashing: Bool","type":"property"},{"path":"\/documentation\/playdate\/system\/shoulddisplay24hourtime","title":"static var shouldDisplay24HourTime: Bool","type":"property"},{"path":"\/documentation\/playdate\/system\/timezoneoffset","title":"static var timezoneOffset: Int32","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/playdate\/system\/clearicache()","title":"static func clearICache()","type":"method"},{"path":"\/documentation\/playdate\/system\/convertdatetimetoepoch(datetime:)","title":"static func convertDateTimeToEpoch(datetime: UnsafeMutablePointer<PDDateTime>) -> UInt32","type":"method"},{"path":"\/documentation\/playdate\/system\/convertepochtodatetime(epoch:datetime:)","title":"static func convertEpochToDateTime(epoch: UInt32, datetime: UnsafeMutablePointer<PDDateTime>)","type":"method"},{"path":"\/documentation\/playdate\/system\/drawfps(x:y:)","title":"static func drawFPS(x: Int32, y: Int32)","type":"method"},{"path":"\/documentation\/playdate\/system\/getsecondssinceepoch(milliseconds:)","title":"static func getSecondsSinceEpoch(milliseconds: UnsafeMutablePointer<UInt32>?) -> UInt32","type":"method"},{"path":"\/documentation\/playdate\/system\/resetelapsedtime()","title":"static func resetElapsedTime()","type":"method"},{"path":"\/documentation\/playdate\/system\/setmenuimage(bitmap:xoffset:)","title":"static func setMenuImage(bitmap: LCDBitmap, xOffset: Int32)","type":"method"},{"path":"\/documentation\/playdate\/system\/setperipheralsenabled(mask:)","title":"static func setPeripheralsEnabled(mask: PDPeripherals)","type":"method"},{"path":"\/documentation\/playdate\/system\/setupdatecallback(update:userdata:)","title":"static func setUpdateCallback(update: PDCallbackFunction, userdata: UnsafeMutableRawPointer?)","type":"method"}],"path":"\/documentation\/playdate\/system","title":"System","type":"enum"},{"title":"Functions","type":"groupMarker"},{"path":"\/documentation\/playdate\/initializeplaydateapi(with:)","title":"func initializePlaydateAPI(with: UnsafeMutableRawPointer)","type":"func"}],"path":"\/documentation\/playdate","title":"Swift Playdate Examples","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":2}}